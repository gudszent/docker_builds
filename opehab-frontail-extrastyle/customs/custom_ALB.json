{
    "wordsRegExClass": {
      "\\[GroupItemStateChangedEvent\\]": "itemChangedEvent",
      "\\[ItemStateChangedEvent     \\]": "itemChangedEvent",
      "\\[vent.ItemStateChangedEvent\\]": "itemChangedEvent",
      "\\[hingStatusInfoChangedEvent\\]": "thingChangedEvent",
      "\\[ItemCommandEvent          \\]": "commandEvent",
      "\\[ome.event.ItemCommandEvent\\]": "commandEvent",
      "\\(COMMUNICATION_ERROR\\)": "highlight commError",
      "Null": "highlight null",
      "Undef": "highlight undef",
      "\\[ERROR\\]": "type error",
      "\\[FATAL\\]": "type error",
      "\\[WARN \\]": "type warn",
      "\\[DEBUG\\]": "type debug",
      "\\[INFO \\]": "type info",
      "\\[TRACE\\]": "type trace",
      " ONLINE": "keyword green online",
      " ON": "keyword green on",
      " OPEN": "keyword green open",
      " PLAY": "keyword green play",
      " OFFLINE": "keyword red offline",
      " OFF": "keyword red off",
      " CLOSED": "keyword red closed",
      " PAUSE": "keyword red pause",
      " STOP": "keyword red stop",
      "Node is DEAD": "keyword red nodeDead",
      "through": "through",
      "become": "become",
      "\\d{4}-\\d\\d-\\d\\d \\d\\d:\\d\\d:\\d\\d.\\d{3}": "date",
      "\\[openhab(.*?)\\]": "origin",
      "\\[penhab(.*?)\\]": "origin",
      "\\[nal(.*?)\\]": "origin",
      "\\[(\\S*?).model.(.*?)\\]": "origin",
      "\\[(\\S*?).core.(.*?)\\]": "origin",
      "\\[(\\S*?).communication.(.*?)\\]": "origin",
      "\\[(\\S*?).event.(.*?)\\]": "origin"
    },
    "wordsRegExMatchClass": {
      "Item '(.*?)'": "highlight",
      "through (.*)": "highlight",
      "through</span> (.*)": "highlight",
      "from(\\s.*?) to": "afterFrom",
      " to(\\s.*)": "afterTo"
    },
    "lines": {
      "/var/log/openhab/openhab.log": "line logLine",
      "/var/log/openhab/events.log": "line logLine",
      "model.script": "line modelLine",
      "ModelRepositoryImpl": "line modelLine",
      "ERROR": "line evid errorLine",
      "FATAL": "line evid errorLine",
      "WARN": "line evid warnLine",
      "DEBUG": "line debugLine",
      "TRACE": "line traceLine"
    }
  }